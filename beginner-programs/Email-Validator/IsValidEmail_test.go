// ********RoostGPT********
/*
Test generated by RoostGPT for test gotest1 using AI Type  and AI Model 

ROOST_METHOD_HASH=IsValidEmail_9ebd397bff
ROOST_METHOD_SIG_HASH=IsValidEmail_d2603fb18f

Scenario 1: Test with a valid email
Details: 
  Description: The test is meant to check whether the function correctly validates a properly formatted email.
Execution: 
  Arrange: Create a string variable with a valid email address.
  Act: Invoke the IsValidEmail function with the valid email.
  Assert: Use Go's testing facilities to verify that the function returns true.
Validation: 
  A valid email should return true. This test is important to ensure that the function correctly identifies valid email addresses.

Scenario 2: Test with an invalid email
Details: 
  Description: The test is meant to check whether the function correctly invalidates a poorly formatted email.
Execution: 
  Arrange: Create a string variable with an invalid email address.
  Act: Invoke the IsValidEmail function with the invalid email.
  Assert: Use Go's testing facilities to verify that the function returns false.
Validation: 
  An invalid email should return false. This test is important to ensure that the function correctly identifies invalid email addresses.

Scenario 3: Test with an email exceeding the maximum length
Details: 
  Description: The test is meant to check whether the function correctly invalidates an email that exceeds the maximum length of 255 characters.
Execution: 
  Arrange: Create a string variable with a valid email address that exceeds 255 characters.
  Act: Invoke the IsValidEmail function with the long email.
  Assert: Use Go's testing facilities to verify that the function returns false.
Validation: 
  An email exceeding 255 characters should return false. This test is important to ensure that the function correctly identifies emails that are too long.

Scenario 4: Test with an empty string
Details: 
  Description: The test is meant to check whether the function correctly invalidates an empty string.
Execution: 
  Arrange: Create a string variable with an empty string.
  Act: Invoke the IsValidEmail function with the empty string.
  Assert: Use Go's testing facilities to verify that the function returns false.
Validation: 
  An empty string is not a valid email and should return false. This test is important to ensure that the function correctly identifies empty strings as invalid emails.

Scenario 5: Test with a string containing special characters
Details: 
  Description: The test is meant to check whether the function correctly validates a string containing special characters, which are allowed in an email.
Execution: 
  Arrange: Create a string variable with an email containing special characters.
  Act: Invoke the IsValidEmail function with the email.
  Assert: Use Go's testing facilities to verify that the function returns true.
Validation: 
  An email containing special characters should return true. This test is important to ensure that the function correctly identifies emails containing special characters as valid.
*/

// ********RoostGPT********
package Validator

import (
	"testing"
)

func TestIsValidEmail(t *testing.T) {
	type test struct {
		input string
		want  bool
	}
	tests := []test{
		{input: "user@example.com", want: true},
		{input: "userexample.com", want: false},
		{input: "user@example", want: false},
		{input: "", want: false},
		{input: "user@e.com", want: true},
	}

	for _, tc := range tests {
		t.Run(tc.input, func(t *testing.T) {
			got := IsValidEmail(tc.input)
			if got != tc.want {
				t.Fatalf("IsValidEmail(%v) = %v; want %v", tc.input, got, tc.want)
			}
		})
	}
}
