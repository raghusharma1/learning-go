// ********RoostGPT********
/*
Test generated by RoostGPT for test gotest1 using AI Type  and AI Model 

ROOST_METHOD_HASH=IsValidEmail_9ebd397bff
ROOST_METHOD_SIG_HASH=IsValidEmail_d2603fb18f

Scenario 1: Test with a valid email
Details: 
  Description: The test is meant to check whether the function correctly validates a properly formatted email.
Execution: 
  Arrange: Create a string variable with a valid email address.
  Act: Invoke the IsValidEmail function with the valid email.
  Assert: The function should return true.
Validation: 
  The assertion checks whether the return value of the function is true. The expected result is true because the email is valid. This test is important to confirm that the function correctly validates properly formatted emails.

Scenario 2: Test with an invalid email
Details:
  Description: The test is meant to check whether the function correctly invalidates an improperly formatted email.
Execution:
  Arrange: Create a string variable with an invalid email address.
  Act: Invoke the IsValidEmail function with the invalid email.
  Assert: The function should return false.
Validation:
  The assertion checks whether the return value of the function is false. The expected result is false because the email is invalid. This test is important to confirm that the function correctly invalidates improperly formatted emails.

Scenario 3: Test with an empty email
Details: 
  Description: The test is meant to check whether the function correctly handles an empty email string.
Execution: 
  Arrange: Create a string variable with an empty string.
  Act: Invoke the IsValidEmail function with the empty string.
  Assert: The function should return false.
Validation: 
  The assertion checks whether the return value of the function is false. The expected result is false because an empty string is not a valid email. This test is important to confirm that the function correctly handles empty strings.

Scenario 4: Test with an email exceeding 255 characters
Details:
  Description: The test is meant to check if the function is correctly handling emails that exceed the maximum length of 255 characters.
Execution:
  Arrange: Create a string variable with an email that exceeds 255 characters.
  Act: Invoke the IsValidEmail function with the long email.
  Assert: The function should return false.
Validation:
  The assertion checks whether the return value of the function is false. The expected result is false because the email exceeds the maximum length. This test is important to confirm that the function correctly handles emails that exceed the maximum length.

Scenario 5: Test with an email exactly 255 characters
Details:
  Description: The test is meant to check if the function is correctly handling emails that are exactly 255 characters long.
Execution:
  Arrange: Create a string variable with an email that is exactly 255 characters long.
  Act: Invoke the IsValidEmail function with the long email.
  Assert: The function should return a result based on whether the email is valid or not.
Validation:
  The assertion checks whether the return value of the function is as expected. The expected result depends on whether the email is valid or not. This test is important to confirm that the function correctly handles emails that are exactly 255 characters long.
*/

// ********RoostGPT********
package Validator

import (
	"testing"
)

func TestIsValidEmail(t *testing.T) {
	var tests = []struct {
		email    string
		expected bool
	}{
		{"test@example.com", true},
		{"test.example", false},
		{"", false},
		{string(make([]byte, 256)), false},
		{string(make([]byte, 255)), false},
	}

	for _, test := range tests {
		if output := IsValidEmail(test.email); output != test.expected {
			t.Error("Test Failed: {} inputted, {} expected, recieved: {}", test.email, test.expected, output)
		}
	}
}
