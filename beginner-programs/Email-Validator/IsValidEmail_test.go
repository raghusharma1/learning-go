// ********RoostGPT********
/*
Test generated by RoostGPT for test gotest1 using AI Type  and AI Model 

ROOST_METHOD_HASH=IsValidEmail_9ebd397bff
ROOST_METHOD_SIG_HASH=IsValidEmail_d2603fb18f

Scenario 1: Test with a valid email address

Details:
    Description: The test is meant to check whether the function correctly validates a properly formatted email address.
Execution:
    Arrange: Create a string variable that holds a valid email address.
    Act: Invoke the IsValidEmail function with the valid email address as the parameter.
    Assert: Use Go testing facilities to verify that the actual result is true.
Validation:
    The assertion checks if the function correctly validates a properly formatted email address. This test is important to ensure that the function can correctly identify valid emails.

Scenario 2: Test with an invalid email address

Details:
    Description: The test is meant to check whether the function correctly invalidates an improperly formatted email address.
Execution:
    Arrange: Create a string variable that holds an invalid email address.
    Act: Invoke the IsValidEmail function with the invalid email address as the parameter.
    Assert: Use Go testing facilities to verify that the actual result is false.
Validation:
    The assertion checks if the function correctly invalidates an improperly formatted email address. This test is important to ensure that the function can correctly identify invalid emails.

Scenario 3: Test with an email address that exceeds the maximum length

Details:
    Description: The test is meant to check whether the function correctly invalidates an email address that exceeds the maximum length of 255 characters.
Execution:
    Arrange: Create a string variable that holds an email address exceeding 255 characters.
    Act: Invoke the IsValidEmail function with the long email address as the parameter.
    Assert: Use Go testing facilities to verify that the actual result is false.
Validation:
    The assertion checks if the function correctly invalidates an email address that exceeds the maximum length. This test is important to ensure that the function can handle and correctly identify emails that exceed the maximum length.

Scenario 4: Test with an empty string

Details:
    Description: The test is meant to check whether the function correctly invalidates an empty string.
Execution:
    Arrange: Create a string variable that holds an empty string.
    Act: Invoke the IsValidEmail function with the empty string as the parameter.
    Assert: Use Go testing facilities to verify that the actual result is false.
Validation:
    The assertion checks if the function correctly invalidates an empty string. This test is important to ensure that the function can handle and correctly identify empty strings as invalid emails.
*/

// ********RoostGPT********
package Validator

import (
	"testing"
)

func TestIsValidEmail(t *testing.T) {
	tests := []struct {
		name string
		email string
		want bool
	}{
		{
			name: "Test with a valid email address",
			email: "test@example.com",
			want: true,
		},
		{
			name: "Test with an invalid email address",
			email: "test@com",
			want: false,
		},
		{
			name: "Test with an email address that exceeds the maximum length",
			email: "test"+strings.Repeat("@example.com", 26),
			want: false,
		},
		{
			name: "Test with an empty string",
			email: "",
			want: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := IsValidEmail(tt.email); got != tt.want {
				t.Errorf("IsValidEmail() = %v, want %v", got, tt.want)
			}
		})
	}
}
