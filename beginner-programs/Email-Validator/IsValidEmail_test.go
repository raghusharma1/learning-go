// ********RoostGPT********
/*
Test generated by RoostGPT for test gotest1 using AI Type  and AI Model 

ROOST_METHOD_HASH=IsValidEmail_9ebd397bff
ROOST_METHOD_SIG_HASH=IsValidEmail_d2603fb18f

Scenario 1: Test with a valid email address

Details:
    Description: The test is meant to check whether the function correctly validates a properly formatted email address.
Execution:
    Arrange: Create a string variable that holds a valid email address.
    Act: Invoke the IsValidEmail function with the valid email address.
    Assert: Use Go testing facilities to verify that the function returns true.
Validation:
    A valid email address should return true when passed to the IsValidEmail function. The importance of this test is to confirm that the function can accurately identify a valid email address, which is a fundamental requirement for any email validation function.

Scenario 2: Test with an invalid email address

Details:
    Description: The test is meant to check whether the function correctly identifies an improperly formatted email address.
Execution:
    Arrange: Create a string variable that holds an invalid email address.
    Act: Invoke the IsValidEmail function with the invalid email address.
    Assert: Use Go testing facilities to verify that the function returns false.
Validation:
    An invalid email address should return false when passed to the IsValidEmail function. This test is important to confirm that the function can accurately identify an invalid email address, which is crucial for preventing incorrectly formatted emails from being accepted.

Scenario 3: Test with an excessively long email address

Details:
    Description: This test is meant to check whether the function correctly identifies an email address that exceeds the character limit.
Execution:
    Arrange: Create a string variable that holds an email address with more than 255 characters.
    Act: Invoke the IsValidEmail function with the excessively long email address.
    Assert: Use Go testing facilities to verify that the function returns false.
Validation:
    An email address that exceeds the character limit should return false when passed to the IsValidEmail function. This test is important for confirming that the function correctly enforces the character limit for email addresses.

Scenario 4: Test with an empty string

Details:
    Description: The test is meant to check how the function handles an empty string.
Execution:
    Arrange: Create a string variable that holds an empty string.
    Act: Invoke the IsValidEmail function with the empty string.
    Assert: Use Go testing facilities to verify that the function returns false.
Validation:
    An empty string should return false when passed to the IsValidEmail function. This test is important for confirming that the function correctly handles empty strings, which are not valid email addresses.
*/

// ********RoostGPT********
```go
package Validator

import (
	"testing"
)

func TestIsValidEmail(t *testing.T) {
	// Table driven tests
	tests := []struct {
		name     string
		email    string
		expected bool
	}{
		{
			name:     "Test with valid email",
			email:    "test@gmail.com",
			expected: true,
		},
		{
			name:     "Test with invalid email",
			email:    "testgmail.com",
			expected: false,
		},
		{
			name:     "Test with excessively long email",
			email:    "testtesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttesttest