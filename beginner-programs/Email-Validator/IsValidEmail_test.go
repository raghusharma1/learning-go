// ********RoostGPT********
/*
Test generated by RoostGPT for test gotest1 using AI Type  and AI Model 

ROOST_METHOD_HASH=IsValidEmail_9ebd397bff
ROOST_METHOD_SIG_HASH=IsValidEmail_d2603fb18f

Scenario 1: Test with a valid email
Details: 
    Description: The test is meant to check whether the function correctly validates a properly formatted email.
Execution: 
    Arrange: Create a string variable with a valid email address.
    Act: Invoke the IsValidEmail function with the valid email.
    Assert: The function should return true.
Validation: 
    The assertion checks whether the return value of the function is true. The expected result is true because the email is valid. This test is important because it ensures that the function can correctly identify valid emails.

Scenario 2: Test with an invalid email
Details: 
    Description: The test is meant to check whether the function correctly identifies an invalid email.
Execution: 
    Arrange: Create a string variable with an invalid email.
    Act: Invoke the IsValidEmail function with the invalid email.
    Assert: The function should return false.
Validation: 
    The assertion checks whether the return value of the function is false. The expected result is false because the email is invalid. This test is crucial because it ensures that the function can correctly identify invalid emails.

Scenario 3: Test with an empty string
Details: 
    Description: This test verifies that the function handles an empty string, which is not a valid email address.
Execution: 
    Arrange: Create a string variable with an empty string.
    Act: Invoke the IsValidEmail function with the empty string.
    Assert: The function should return false.
Validation: 
    The assertion checks whether the function returns false when given an empty string. The expected result is false because an empty string is not a valid email. This test is important because it ensures that the function handles edge cases like an empty string correctly.

Scenario 4: Test with an excessively long email
Details: 
    Description: This test checks whether the function correctly handles an email that exceeds the maximum length of 255 characters.
Execution: 
    Arrange: Create a string variable with an email that is longer than 255 characters.
    Act: Invoke the IsValidEmail function with the excessively long email.
    Assert: The function should return false.
Validation: 
    The assertion checks whether the function returns false when given an excessively long email. The expected result is false because emails must not exceed 255 characters. This test is important because it ensures that the function correctly handles edge cases like excessively long emails.
*/

// ********RoostGPT********
package Validator

import (
	"testing"
)

var emailRegexp = regexp.MustCompile("^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$")

func TestIsValidEmail(t *testing.T) {
	testCases := []struct {
		email string
		want  bool
	}{
		{"testEmail@example.com", true},
		{"invalidEmail", false},
		{"", false},
		{"verylongemailaddress...............................@example.com", false},
	}

	for _, tc := range testCases {
		t.Run(tc.email, func(t *testing.T) {
			got := IsValidEmail(tc.email)

			if got != tc.want {
				t.Errorf("IsValidEmail(%q) = %v; want %v", tc.email, got, tc.want)
			} else {
				t.Logf("IsValidEmail(%q) = %v; passed", tc.email, got)
			}
		})
	}
}
