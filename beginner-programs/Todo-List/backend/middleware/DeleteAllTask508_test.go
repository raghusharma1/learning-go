// ********RoostGPT********
/*
Test generated by RoostGPT for test test-golang using AI Type  and AI Model 

ROOST_METHOD_HASH=DeleteAllTask_f9af6ec409
ROOST_METHOD_SIG_HASH=DeleteAllTask_9390cec12e

Scenario 1: Successful All Task Deletion

Details:
  Description: This test is meant to check if the function DeleteAllTask successfully deletes all tasks and returns the correct count of deleted tasks. The target scenario is when the function is called with valid HTTP request and response writer.

Execution:
  Arrange: Mock the required http.ResponseWriter and http.Request. Also, mock the function `deleteAllTask` to return a predefined count of deleted tasks.
  Act: Invoke the DeleteAllTask function with the mocked http.ResponseWriter and http.Request.
  Assert: Use Go testing facilities to verify that the actual results match the expected count of deleted tasks.

Validation:
  The choice of assertion is to verify that the function DeleteAllTask works as expected and returns the correct count of deleted tasks. The test is important as it ensures that the function correctly deletes all tasks, which is a critical feature of the application.

Scenario 2: Failure in Task Deletion

Details:
  Description: This test is meant to check if the function DeleteAllTask handles errors properly when there is an issue with deleting tasks. The target scenario is when the function encounters an error during the deletion process.

Execution:
  Arrange: Mock the required http.ResponseWriter and http.Request. Also, mock the function `deleteAllTask` to throw an error.
  Act: Invoke the DeleteAllTask function with the mocked http.ResponseWriter and http.Request.
  Assert: Use Go testing facilities to verify that the actual results match the expected error.

Validation:
  The choice of assertion is to verify that the function DeleteAllTask handles errors properly when there is a failure in deleting tasks. This test is important as it ensures the robustness of the application by confirming that it can handle errors correctly.

Scenario 3: Invalid HTTP Request

Details:
  Description: This test is meant to check if the function DeleteAllTask handles invalid HTTP requests properly. The target scenario is when the function is called with an invalid http.Request.

Execution:
  Arrange: Mock the required http.ResponseWriter and an invalid http.Request. 
  Act: Invoke the DeleteAllTask function with the mocked http.ResponseWriter and the invalid http.Request.
  Assert: Use Go testing facilities to verify that the actual results match the expected error.

Validation:
  The choice of assertion is to verify that the function DeleteAllTask handles invalid HTTP requests properly. This test is important as it ensures the robustness of the application by confirming that it can handle invalid inputs correctly.
*/

// ********RoostGPT********
package middleware

import (
	"context"
	"net/http"
	"net/http/httptest"
	"testing"

	"go.mongodb.org/mongo-driver/bson"
)

func TestDeleteAllTask508(t *testing.T) {
	// Define test cases
	testCases := []struct {
		desc    string
		setup   func() (func(), *http.Request, *httptest.ResponseRecorder)
		wantErr bool
		want    int64
	}{
		{
			desc: "Successful All Task Deletion",
			setup: func() (func(), *http.Request, *httptest.ResponseRecorder) {
				req, _ := http.NewRequest("GET", "/tasks", nil)
				rr := httptest.NewRecorder()

				// Mock delete all tasks function
				deleteAllTask = func() int64 {
					return 5
				}

				return func() {}, req, rr
			},
			wantErr: false,
			want:    5,
		},
		{
			desc: "Failure in Task Deletion",
			setup: func() (func(), *http.Request, *httptest.ResponseRecorder) {
				req, _ := http.NewRequest("GET", "/tasks", nil)
				rr := httptest.NewRecorder()

				// Mock delete all tasks function to simulate error
				deleteAllTask = func() int64 {
					return -1
				}

				return func() {}, req, rr
			},
			wantErr: true,
			want:    -1,
		},
		{
			desc: "Invalid HTTP Request",
			setup: func() (func(), *http.Request, *httptest.ResponseRecorder) {
				req, _ := http.NewRequest("INVALID", "/tasks", nil)
				rr := httptest.NewRecorder()

				return func() {}, req, rr
			},
			wantErr: true,
			want:    -1,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.desc, func(t *testing.T) {
			// Arrange
			tearDown, req, rr := tc.setup()
			defer tearDown()

			// Act
			DeleteAllTask(rr, req)

			// Assert
			if tc.wantErr {
				if rr.Code != http.StatusInternalServerError {
					t.Errorf("%s: expected %d, got %d", tc.desc, http.StatusInternalServerError, rr.Code)
				}
			} else {
				if rr.Code != http.StatusOK {
					t.Errorf("%s: expected %d, got %d", tc.desc, http.StatusOK, rr.Code)
				}
				if rr.Body.String() != fmt.Sprintf("%d", tc.want) {
					t.Errorf("%s: expected %d, got %s", tc.desc, tc.want, rr.Body.String())
				}
			}
		})
	}
}
