// ********RoostGPT********
/*
Test generated by RoostGPT for test test-golang using AI Type  and AI Model 

ROOST_METHOD_HASH=goDotEnvVariable_8f7b64c895
ROOST_METHOD_SIG_HASH=goDotEnvVariable_793184d000

Scenario 1: Test when environment variable exists

Details:
    Description: This test is meant to check if the function correctly retrieves an environment variable when it exists. In this scenario, we will have a .env file with a defined variable.
Execution:
    Arrange: Create a .env file in the root directory of the project and define a key-value pair.
    Act: Invoke the goDotEnvVariable function with the key defined in the .env file as a parameter.
    Assert: Use Go's testing facilities to verify that the returned value matches the value set in the .env file.
Validation:
    The choice of assertion is based on the expected behavior of the function, which is to return the value of the provided key from the .env file. This test is important to ensure that the function correctly retrieves environment variables, which can be critical for application configuration.

Scenario 2: Test when environment variable does not exist

Details:
    Description: This test is meant to check if the function correctly handles a situation where it is asked to retrieve a non-existing environment variable. In this scenario, we will have a .env file without the required key.
Execution:
    Arrange: Create a .env file in the root directory of the project without defining the required key-value pair.
    Act: Invoke the goDotEnvVariable function with a non-existing key as a parameter.
    Assert: Use Go's testing facilities to verify that the returned value is an empty string.
Validation:
    The choice of assertion is based on the expected behavior of the function when the provided key does not exist in the .env file. This test is important because the function needs to handle situations where it is asked to retrieve non-existing keys gracefully.

Scenario 3: Test when .env file does not exist

Details:
    Description: This test is meant to check if the function correctly handles a situation where there is no .env file in the root directory of the project. 
Execution:
    Arrange: Ensure there is no .env file in the root directory of the project.
    Act: Invoke the goDotEnvVariable function with any key as a parameter.
    Assert: Use Go's testing facilities to verify that the function prints "Error loading .env file" to the console and returns an empty string.
Validation:
    The choice of assertion is based on the expected behavior of the function when there is no .env file. This test is crucial because the function needs to handle such situations gracefully without causing unexpected crashes or errors in the application.
*/

// ********RoostGPT********
package middleware

import (
	"fmt"
	"os"
	"testing"

	"github.com/joho/godotenv"
)

func TestGoDotEnvVariable(t *testing.T) {
	tests := []struct {
		name      string
		envFile   string
		envKey    string
		envValue  string
		expectErr bool
	}{
		{
			name:      "Test when environment variable exists",
			envFile:   ".env",
			envKey:    "EXISTING_KEY",
			envValue:  "value",
			expectErr: false,
		},
		{
			name:      "Test when environment variable does not exist",
			envFile:   ".env",
			envKey:    "NON_EXISTING_KEY",
			envValue:  "",
			expectErr: false,
		},
		{
			name:      "Test when .env file does not exist",
			envFile:   "non_existing.env",
			envKey:    "ANY_KEY",
			envValue:  "",
			expectErr: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			// Arrange
			if tt.envFile != "non_existing.env" {
				err := godotenv.Load(tt.envFile)
				if err != nil {
					t.Fatalf("Error loading .env file: %v", err)
				}
				os.Setenv(tt.envKey, tt.envValue)
			}

			// Act
			value := goDotEnvVariable(tt.envKey)

			// Assert
			if tt.expectErr {
				if value != "" {
					t.Errorf("Expected an empty string but got: %v", value)
				}
			} else {
				if value != tt.envValue {
					t.Errorf("Expected %v but got %v", tt.envValue, value)
				}
			}
		})
	}
}
