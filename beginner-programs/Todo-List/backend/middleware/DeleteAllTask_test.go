// ********RoostGPT********
/*
Test generated by RoostGPT for test test-golang using AI Type  and AI Model 

ROOST_METHOD_HASH=deleteAllTask_b94a0f57d1
ROOST_METHOD_SIG_HASH=deleteAllTask_ec6cbb32dc

Scenario 1: Successful Deletion of All Tasks

Details:
    Description: This test is meant to check if the function successfully deletes all tasks when there are tasks present in the collection.
Execution:
    Arrange: Mock the 'DeleteMany' function of the collection to return a result with a DeletedCount greater than zero and no error.
    Act: Call the 'deleteAllTask' function.
    Assert: Check that the returned DeletedCount is equal to the mocked DeletedCount and there is no error.
Validation:
    The assertion checks whether the function correctly deletes all tasks and returns the correct number of deleted tasks. This is important to ensure the function correctly manages the tasks in the application.

Scenario 2: Successful Deletion of All Tasks When No Tasks Are Present

Details:
    Description: This test is meant to check if the function successfully handles the case when there are no tasks to delete in the collection.
Execution:
    Arrange: Mock the 'DeleteMany' function of the collection to return a result with a DeletedCount of zero and no error.
    Act: Call the 'deleteAllTask' function.
    Assert: Check that the returned DeletedCount is zero and there is no error.
Validation:
    The assertion checks whether the function correctly handles the situation when there are no tasks to delete. This is important to ensure the function doesn't fail when there are no tasks to delete.

Scenario 3: Error During Deletion of Tasks

Details:
    Description: This test is meant to check if the function correctly handles an error during the deletion of tasks.
Execution:
    Arrange: Mock the 'DeleteMany' function of the collection to return an error.
    Act: Call the 'deleteAllTask' function.
    Assert: Check that the function logs the error and terminates the program.
Validation:
    The assertion checks whether the function correctly handles errors during the deletion of tasks. This is important to ensure the function doesn't silently fail when there's an error during the deletion of tasks.
*/

// ********RoostGPT********
package middleware

import (
	"context"
	"testing"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
)

// MockCollection is a mock implementation of a mongo.Collection
type MockCollection struct {
	DeletedCount int64
	Err          error
}

func (mc *MockCollection) DeleteMany(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	return &mongo.DeleteResult{DeletedCount: mc.DeletedCount}, mc.Err
}

// TestDeleteAllTask tests the deleteAllTask function
func TestDeleteAllTask(t *testing.T) {
	testCases := []struct {
		Name          string
		Collection    *MockCollection
		ExpectedCount int64
		ShouldError   bool
	}{
		{
			Name:          "Successful Deletion of All Tasks",
			Collection:    &MockCollection{DeletedCount: 5, Err: nil},
			ExpectedCount: 5,
			ShouldError:   false,
		},
		{
			Name:          "Successful Deletion of All Tasks When No Tasks Are Present",
			Collection:    &MockCollection{DeletedCount: 0, Err: nil},
			ExpectedCount: 0,
			ShouldError:   false,
		},
		{
			Name:          "Error During Deletion of Tasks",
			Collection:    &MockCollection{DeletedCount: 0, Err: errors.New("deletion error")},
			ExpectedCount: 0,
			ShouldError:   true,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.Name, func(t *testing.T) {
			// arrange
			collection = tc.Collection

			// act
			actualCount := deleteAllTask()

			// assert
			if actualCount != tc.ExpectedCount {
				t.Errorf("Expected count %d, but got %d", tc.ExpectedCount, actualCount)
			}
			if (tc.Collection.Err != nil) != tc.ShouldError {
				t.Errorf("Expected error status %v, but got %v", tc.ShouldError, tc.Collection.Err != nil)
			}
		})
	}
}
